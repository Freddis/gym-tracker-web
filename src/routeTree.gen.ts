/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkoutsIndexRouteImport } from './routes/workouts/index'
import { Route as ExercisesIndexRouteImport } from './routes/exercises/index'
import { Route as ArgusIndexRouteImport } from './routes/argus/index'
import { Route as ExercisesCreateRouteImport } from './routes/exercises/create'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as WorkoutsUpdateWorkoutIdRouteImport } from './routes/workouts/update/$workoutId'
import { Route as ExercisesUpdateExerciseIdRouteImport } from './routes/exercises/update/$exerciseId'
import { ServerRoute as SwaggerServerRouteImport } from './routes/swagger'
import { ServerRoute as StoplightServerRouteImport } from './routes/stoplight'
import { ServerRoute as SchemaServerRouteImport } from './routes/schema'
import { ServerRoute as ApiServerRouteImport } from './routes/api'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkoutsIndexRoute = WorkoutsIndexRouteImport.update({
  id: '/workouts/',
  path: '/workouts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesIndexRoute = ExercisesIndexRouteImport.update({
  id: '/exercises/',
  path: '/exercises/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArgusIndexRoute = ArgusIndexRouteImport.update({
  id: '/argus/',
  path: '/argus/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesCreateRoute = ExercisesCreateRouteImport.update({
  id: '/exercises/create',
  path: '/exercises/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkoutsUpdateWorkoutIdRoute = WorkoutsUpdateWorkoutIdRouteImport.update({
  id: '/workouts/update/$workoutId',
  path: '/workouts/update/$workoutId',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesUpdateExerciseIdRoute =
  ExercisesUpdateExerciseIdRouteImport.update({
    id: '/exercises/update/$exerciseId',
    path: '/exercises/update/$exerciseId',
    getParentRoute: () => rootRouteImport,
  } as any)
const SwaggerServerRoute = SwaggerServerRouteImport.update({
  id: '/swagger',
  path: '/swagger',
  getParentRoute: () => rootServerRouteImport,
} as any)
const StoplightServerRoute = StoplightServerRouteImport.update({
  id: '/stoplight',
  path: '/stoplight',
  getParentRoute: () => rootServerRouteImport,
} as any)
const SchemaServerRoute = SchemaServerRouteImport.update({
  id: '/schema',
  path: '/schema',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiServerRoute = ApiServerRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/exercises/create': typeof ExercisesCreateRoute
  '/argus': typeof ArgusIndexRoute
  '/exercises': typeof ExercisesIndexRoute
  '/workouts': typeof WorkoutsIndexRoute
  '/exercises/update/$exerciseId': typeof ExercisesUpdateExerciseIdRoute
  '/workouts/update/$workoutId': typeof WorkoutsUpdateWorkoutIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/exercises/create': typeof ExercisesCreateRoute
  '/argus': typeof ArgusIndexRoute
  '/exercises': typeof ExercisesIndexRoute
  '/workouts': typeof WorkoutsIndexRoute
  '/exercises/update/$exerciseId': typeof ExercisesUpdateExerciseIdRoute
  '/workouts/update/$workoutId': typeof WorkoutsUpdateWorkoutIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/exercises/create': typeof ExercisesCreateRoute
  '/argus/': typeof ArgusIndexRoute
  '/exercises/': typeof ExercisesIndexRoute
  '/workouts/': typeof WorkoutsIndexRoute
  '/exercises/update/$exerciseId': typeof ExercisesUpdateExerciseIdRoute
  '/workouts/update/$workoutId': typeof WorkoutsUpdateWorkoutIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/exercises/create'
    | '/argus'
    | '/exercises'
    | '/workouts'
    | '/exercises/update/$exerciseId'
    | '/workouts/update/$workoutId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/exercises/create'
    | '/argus'
    | '/exercises'
    | '/workouts'
    | '/exercises/update/$exerciseId'
    | '/workouts/update/$workoutId'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/exercises/create'
    | '/argus/'
    | '/exercises/'
    | '/workouts/'
    | '/exercises/update/$exerciseId'
    | '/workouts/update/$workoutId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  ExercisesCreateRoute: typeof ExercisesCreateRoute
  ArgusIndexRoute: typeof ArgusIndexRoute
  ExercisesIndexRoute: typeof ExercisesIndexRoute
  WorkoutsIndexRoute: typeof WorkoutsIndexRoute
  ExercisesUpdateExerciseIdRoute: typeof ExercisesUpdateExerciseIdRoute
  WorkoutsUpdateWorkoutIdRoute: typeof WorkoutsUpdateWorkoutIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api': typeof ApiServerRoute
  '/schema': typeof SchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
  '/swagger': typeof SwaggerServerRoute
}
export interface FileServerRoutesByTo {
  '/api': typeof ApiServerRoute
  '/schema': typeof SchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
  '/swagger': typeof SwaggerServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api': typeof ApiServerRoute
  '/schema': typeof SchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
  '/swagger': typeof SwaggerServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api' | '/schema' | '/stoplight' | '/swagger'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api' | '/schema' | '/stoplight' | '/swagger'
  id: '__root__' | '/api' | '/schema' | '/stoplight' | '/swagger'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiServerRoute: typeof ApiServerRoute
  SchemaServerRoute: typeof SchemaServerRoute
  StoplightServerRoute: typeof StoplightServerRoute
  SwaggerServerRoute: typeof SwaggerServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workouts/': {
      id: '/workouts/'
      path: '/workouts'
      fullPath: '/workouts'
      preLoaderRoute: typeof WorkoutsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises/': {
      id: '/exercises/'
      path: '/exercises'
      fullPath: '/exercises'
      preLoaderRoute: typeof ExercisesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/argus/': {
      id: '/argus/'
      path: '/argus'
      fullPath: '/argus'
      preLoaderRoute: typeof ArgusIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises/create': {
      id: '/exercises/create'
      path: '/exercises/create'
      fullPath: '/exercises/create'
      preLoaderRoute: typeof ExercisesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workouts/update/$workoutId': {
      id: '/workouts/update/$workoutId'
      path: '/workouts/update/$workoutId'
      fullPath: '/workouts/update/$workoutId'
      preLoaderRoute: typeof WorkoutsUpdateWorkoutIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises/update/$exerciseId': {
      id: '/exercises/update/$exerciseId'
      path: '/exercises/update/$exerciseId'
      fullPath: '/exercises/update/$exerciseId'
      preLoaderRoute: typeof ExercisesUpdateExerciseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/swagger': {
      id: '/swagger'
      path: '/swagger'
      fullPath: '/swagger'
      preLoaderRoute: typeof SwaggerServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/stoplight': {
      id: '/stoplight'
      path: '/stoplight'
      fullPath: '/stoplight'
      preLoaderRoute: typeof StoplightServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/schema': {
      id: '/schema'
      path: '/schema'
      fullPath: '/schema'
      preLoaderRoute: typeof SchemaServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  ExercisesCreateRoute: ExercisesCreateRoute,
  ArgusIndexRoute: ArgusIndexRoute,
  ExercisesIndexRoute: ExercisesIndexRoute,
  WorkoutsIndexRoute: WorkoutsIndexRoute,
  ExercisesUpdateExerciseIdRoute: ExercisesUpdateExerciseIdRoute,
  WorkoutsUpdateWorkoutIdRoute: WorkoutsUpdateWorkoutIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiServerRoute: ApiServerRoute,
  SchemaServerRoute: SchemaServerRoute,
  StoplightServerRoute: StoplightServerRoute,
  SwaggerServerRoute: SwaggerServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
