// This file is auto-generated by @hey-api/openapi-ts

export type Exercise = {
  id: number;
  name: string;
  description: string | null;
  difficulty: number | null;
  equipmentId: number;
  images: Array<string>;
  params: Array<number>;
  userId: number | null;
  copiedFromId: number | null;
  parentExerciseId: number | null;
  createdAt: Date;
  updatedAt: Date | null;
};

export type Workout = {
  id: number;
  externalId: string | null;
  typeId: number | null;
  userId: number;
  calories: number;
  start: Date;
  end: Date;
  createdAt: Date;
  updatedAt: Date | null;
  exercises: Array<
    WorkoutExercise & {
      exercise: Exercise;
      sets: Array<WorkoutExerciseSet>;
    }
  >;
};

export type WorkoutExercise = {
  id: number;
  workoutId: number;
  userId: number;
  exerciseId: number;
  createdAt: Date;
  updatedAt: Date | null;
};

export type WorkoutExerciseSet = {
  id: number;
  exerciseId: number;
  workoutId: number;
  userId: number;
  workoutExerciseId: number;
  start: Date | null;
  end: Date | null;
  weight: number | null;
  reps: number | null;
  createdAt: Date;
  updatedAt: Date | null;
};

export type PostAuthRegisterData = {
  body?: {
    name: string;
    email: string;
    password: string;
    passwordConfirmation: string;
  };
  path?: never;
  query?: never;
  url: "/auth/register";
};

export type PostAuthRegisterErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PostAuthRegisterError =
  PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
    email: string;
    name: string;
    jwt: string;
  };
};

export type PostAuthRegisterResponse =
  PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthLoginData = {
  body?: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
    email: string;
    name: string;
    jwt: string;
  };
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type GetExercisesData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    type?:
      | "steps"
      | "weather"
      | "calories"
      | "food"
      | "activity"
      | "weight"
      | "consumedcalories"
      | "drink"
      | "heartrate"
      | "status"
      | "bodymetrics"
      | "workout_log"
      | "sleepreport"
      | "fitnesstest";
  };
  url: "/exercises/";
};

export type GetExercisesErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetExercisesError = GetExercisesErrors[keyof GetExercisesErrors];

export type GetExercisesResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<Exercise>;
  };
};

export type GetExercisesResponse =
  GetExercisesResponses[keyof GetExercisesResponses];

export type PostExercisesData = {
  body?: {
    name: string;
  };
  path?: never;
  query?: never;
  url: "/exercises/";
};

export type PostExercisesErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PostExercisesError = PostExercisesErrors[keyof PostExercisesErrors];

export type PostExercisesResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PostExercisesResponse =
  PostExercisesResponses[keyof PostExercisesResponses];

export type DeleteExercisesByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type DeleteExercisesByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type DeleteExercisesByIdError =
  DeleteExercisesByIdErrors[keyof DeleteExercisesByIdErrors];

export type DeleteExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteExercisesByIdResponse =
  DeleteExercisesByIdResponses[keyof DeleteExercisesByIdResponses];

export type GetExercisesByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type GetExercisesByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetExercisesByIdError =
  GetExercisesByIdErrors[keyof GetExercisesByIdErrors];

export type GetExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    item: Exercise;
  };
};

export type GetExercisesByIdResponse =
  GetExercisesByIdResponses[keyof GetExercisesByIdResponses];

export type PatchExercisesByIdData = {
  body?: {
    name: string;
    description: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type PatchExercisesByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PatchExercisesByIdError =
  PatchExercisesByIdErrors[keyof PatchExercisesByIdErrors];

export type PatchExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PatchExercisesByIdResponse =
  PatchExercisesByIdResponses[keyof PatchExercisesByIdResponses];

export type GetWorkoutsData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
  };
  url: "/workouts/";
};

export type GetWorkoutsErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetWorkoutsError = GetWorkoutsErrors[keyof GetWorkoutsErrors];

export type GetWorkoutsResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<Workout>;
  };
};

export type GetWorkoutsResponse =
  GetWorkoutsResponses[keyof GetWorkoutsResponses];

export type PostWorkoutsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/workouts/";
};

export type PostWorkoutsErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PostWorkoutsError = PostWorkoutsErrors[keyof PostWorkoutsErrors];

export type PostWorkoutsResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
  };
};

export type PostWorkoutsResponse =
  PostWorkoutsResponses[keyof PostWorkoutsResponses];

export type DeleteWorkoutsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type DeleteWorkoutsByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type DeleteWorkoutsByIdError =
  DeleteWorkoutsByIdErrors[keyof DeleteWorkoutsByIdErrors];

export type DeleteWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteWorkoutsByIdResponse =
  DeleteWorkoutsByIdResponses[keyof DeleteWorkoutsByIdResponses];

export type GetWorkoutsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type GetWorkoutsByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetWorkoutsByIdError =
  GetWorkoutsByIdErrors[keyof GetWorkoutsByIdErrors];

export type GetWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    item: Workout;
  };
};

export type GetWorkoutsByIdResponse =
  GetWorkoutsByIdResponses[keyof GetWorkoutsByIdResponses];

export type PatchWorkoutsByIdData = {
  body?: {
    start: Date;
    end: Date | null;
    calories: number;
    exercises: Array<{
      id?: number;
      exerciseId: number;
      sets: Array<{
        id?: number;
        end: Date | null;
        weight: number | null;
        reps: number | null;
        start: Date | null;
      }>;
    }>;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type PatchWorkoutsByIdErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type PatchWorkoutsByIdError =
  PatchWorkoutsByIdErrors[keyof PatchWorkoutsByIdErrors];

export type PatchWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PatchWorkoutsByIdResponse =
  PatchWorkoutsByIdResponses[keyof PatchWorkoutsByIdResponses];

export type GetEntriesData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    type?:
      | "steps"
      | "weather"
      | "calories"
      | "food"
      | "activity"
      | "weight"
      | "consumedcalories"
      | "drink"
      | "heartrate"
      | "status"
      | "bodymetrics"
      | "workout_log"
      | "sleepreport"
      | "fitnesstest";
  };
  url: "/entries/";
};

export type GetEntriesErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetEntriesError = GetEntriesErrors[keyof GetEntriesErrors];

export type GetEntriesResponses = {
  /**
   * Good Response
   */
  200: {
    /**
     * Page or items
     */
    items: Array<
      | {
          id: number;
          externalId: string;
          type: "steps";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
          subtype: null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "workout";
          data: {
            id: number;
            type: "activity";
            created: number;
            user_id: number;
            timestamp: number;
            subtype: "workout";
            activeDuration?: number;
            duration?: number;
            calories?: number;
            TotalExercisesInWorkout?: number;
            end: number;
            start: number;
            exercises?: Array<{
              exercise_id: string;
              exercise_name: string;
              exercise_type: string;
              sets: Array<{
                draft?: boolean;
                reps?: number;
                weight?: number;
              }>;
            }>;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "weather";
          subtype: null;
          data: {
            id: number;
            type: "weather";
            created: number;
            user_id: number;
            timestamp: number;
            temperature_current: number;
            temperature_high: number;
            temperature_low: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "weightlifting";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "weight";
          subtype: null;
          data: {
            id: number;
            type: "weight";
            created: number;
            user_id: number;
            timestamp: number;
            value: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "walking";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "calories";
          subtype: null;
          data: {
            calories: number;
            [key: string]: unknown | number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "consumedcalories";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "drink";
          subtype: "coffee" | "water";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "workout_log";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "fitnesstest";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "sleepreport";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "bodymetrics";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "status";
          subtype: null;
          data: {
            note: string;
            photos?: Array<{
              id: string;
              href: string;
            }>;
            [key: string]:
              | unknown
              | string
              | Array<{
                  id: string;
                  href: string;
                }>
              | undefined;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "heartrate";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "food";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
    >;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of items per page
       */
      pageSize: number;
    };
  };
};

export type GetEntriesResponse = GetEntriesResponses[keyof GetEntriesResponses];

export type GetEntriesTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/entries/types";
};

export type GetEntriesTypesErrors = {
  /**
   * Action Error or Validation Error
   */
  400:
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "actionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode: "invalidPassword" | "emailAlreadyExists";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "validationFailed";
          fieldErrors?: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unauthorized" | "userNotFound";
    };
  };
  /**
   * Permission Error
   */
  403: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "missingPermission";
      /**
       * List of possible permissions to allow access
       */
      permissions: Array<"clientRead">;
    };
  };
  /**
   * Validation Error Response
   */
  422: {
    error: {
      /**
       * Code to handle on the frontend.
       */
      code: "validationFailed";
      fieldErrors?: Array<{
        /**
         * Name of the field
         */
        field: string;
        /**
         * Error message
         */
        message: string;
        fieldErrors: Array<{
          /**
           * Name of the field
           */
          field: string;
          /**
           * Error message
           */
          message: string;
        }>;
      }>;
    };
  };
  /**
   * Unhandled Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "unknownError";
    };
  };
};

export type GetEntriesTypesError =
  GetEntriesTypesErrors[keyof GetEntriesTypesErrors];

export type GetEntriesTypesResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<
      | "steps"
      | "weather"
      | "calories"
      | "food"
      | "activity"
      | "weight"
      | "consumedcalories"
      | "drink"
      | "heartrate"
      | "status"
      | "bodymetrics"
      | "workout_log"
      | "sleepreport"
      | "fitnesstest"
    >;
  };
};

export type GetEntriesTypesResponse =
  GetEntriesTypesResponses[keyof GetEntriesTypesResponses];

export type ClientOptions = {
  baseURL: "http://localhost:3000/api/v1" | (string & {});
};
