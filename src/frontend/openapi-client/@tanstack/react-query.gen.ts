// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  postAuthRegister,
  postAuthLogin,
  getExercises,
  postExercises,
  putExercises,
  deleteExercisesById,
  getExercisesById,
  patchExercisesById,
  getWorkouts,
  postWorkouts,
  putWorkouts,
  deleteWorkoutsById,
  getWorkoutsById,
  patchWorkoutsById,
  postWeight,
  getEntries,
  getEntriesTypes,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  PostAuthRegisterData,
  PostAuthRegisterError,
  PostAuthRegisterResponse,
  PostAuthLoginData,
  PostAuthLoginError,
  PostAuthLoginResponse,
  GetExercisesData,
  PostExercisesData,
  PostExercisesError,
  PostExercisesResponse,
  PutExercisesData,
  PutExercisesError,
  PutExercisesResponse,
  DeleteExercisesByIdData,
  DeleteExercisesByIdError,
  DeleteExercisesByIdResponse,
  GetExercisesByIdData,
  PatchExercisesByIdData,
  PatchExercisesByIdError,
  PatchExercisesByIdResponse,
  GetWorkoutsData,
  PostWorkoutsData,
  PostWorkoutsError,
  PostWorkoutsResponse,
  PutWorkoutsData,
  PutWorkoutsError,
  PutWorkoutsResponse,
  DeleteWorkoutsByIdData,
  DeleteWorkoutsByIdError,
  DeleteWorkoutsByIdResponse,
  GetWorkoutsByIdData,
  PatchWorkoutsByIdData,
  PatchWorkoutsByIdError,
  PatchWorkoutsByIdResponse,
  PostWeightData,
  PostWeightError,
  PostWeightResponse,
  GetEntriesData,
  GetEntriesError,
  GetEntriesResponse,
  GetEntriesTypesData,
} from "../types.gen";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const postAuthRegisterQueryKey = (
  options?: Options<PostAuthRegisterData>,
) => createQueryKey("postAuthRegister", options);

export const postAuthRegisterOptions = (
  options?: Options<PostAuthRegisterData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRegisterQueryKey(options),
  });
};

export const postAuthRegisterMutation = (
  options?: Partial<Options<PostAuthRegisterData>>,
): UseMutationOptions<
  PostAuthRegisterResponse,
  AxiosError<PostAuthRegisterError>,
  Options<PostAuthRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRegisterResponse,
    AxiosError<PostAuthRegisterError>,
    Options<PostAuthRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthLoginQueryKey = (options?: Options<PostAuthLoginData>) =>
  createQueryKey("postAuthLogin", options);

export const postAuthLoginOptions = (options?: Options<PostAuthLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthLoginQueryKey(options),
  });
};

export const postAuthLoginMutation = (
  options?: Partial<Options<PostAuthLoginData>>,
): UseMutationOptions<
  PostAuthLoginResponse,
  AxiosError<PostAuthLoginError>,
  Options<PostAuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLoginResponse,
    AxiosError<PostAuthLoginError>,
    Options<PostAuthLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getExercisesQueryKey = (options?: Options<GetExercisesData>) =>
  createQueryKey("getExercises", options);

export const getExercisesOptions = (options?: Options<GetExercisesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExercises({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExercisesQueryKey(options),
  });
};

export const postExercisesQueryKey = (options?: Options<PostExercisesData>) =>
  createQueryKey("postExercises", options);

export const postExercisesOptions = (options?: Options<PostExercisesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postExercises({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postExercisesQueryKey(options),
  });
};

export const postExercisesMutation = (
  options?: Partial<Options<PostExercisesData>>,
): UseMutationOptions<
  PostExercisesResponse,
  AxiosError<PostExercisesError>,
  Options<PostExercisesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostExercisesResponse,
    AxiosError<PostExercisesError>,
    Options<PostExercisesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postExercises({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putExercisesMutation = (
  options?: Partial<Options<PutExercisesData>>,
): UseMutationOptions<
  PutExercisesResponse,
  AxiosError<PutExercisesError>,
  Options<PutExercisesData>
> => {
  const mutationOptions: UseMutationOptions<
    PutExercisesResponse,
    AxiosError<PutExercisesError>,
    Options<PutExercisesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putExercises({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteExercisesByIdMutation = (
  options?: Partial<Options<DeleteExercisesByIdData>>,
): UseMutationOptions<
  DeleteExercisesByIdResponse,
  AxiosError<DeleteExercisesByIdError>,
  Options<DeleteExercisesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteExercisesByIdResponse,
    AxiosError<DeleteExercisesByIdError>,
    Options<DeleteExercisesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteExercisesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getExercisesByIdQueryKey = (
  options: Options<GetExercisesByIdData>,
) => createQueryKey("getExercisesById", options);

export const getExercisesByIdOptions = (
  options: Options<GetExercisesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExercisesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExercisesByIdQueryKey(options),
  });
};

export const patchExercisesByIdMutation = (
  options?: Partial<Options<PatchExercisesByIdData>>,
): UseMutationOptions<
  PatchExercisesByIdResponse,
  AxiosError<PatchExercisesByIdError>,
  Options<PatchExercisesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchExercisesByIdResponse,
    AxiosError<PatchExercisesByIdError>,
    Options<PatchExercisesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchExercisesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getWorkoutsQueryKey = (options?: Options<GetWorkoutsData>) =>
  createQueryKey("getWorkouts", options);

export const getWorkoutsOptions = (options?: Options<GetWorkoutsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getWorkouts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getWorkoutsQueryKey(options),
  });
};

export const postWorkoutsQueryKey = (options?: Options<PostWorkoutsData>) =>
  createQueryKey("postWorkouts", options);

export const postWorkoutsOptions = (options?: Options<PostWorkoutsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postWorkouts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postWorkoutsQueryKey(options),
  });
};

export const postWorkoutsMutation = (
  options?: Partial<Options<PostWorkoutsData>>,
): UseMutationOptions<
  PostWorkoutsResponse,
  AxiosError<PostWorkoutsError>,
  Options<PostWorkoutsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostWorkoutsResponse,
    AxiosError<PostWorkoutsError>,
    Options<PostWorkoutsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postWorkouts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putWorkoutsMutation = (
  options?: Partial<Options<PutWorkoutsData>>,
): UseMutationOptions<
  PutWorkoutsResponse,
  AxiosError<PutWorkoutsError>,
  Options<PutWorkoutsData>
> => {
  const mutationOptions: UseMutationOptions<
    PutWorkoutsResponse,
    AxiosError<PutWorkoutsError>,
    Options<PutWorkoutsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putWorkouts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteWorkoutsByIdMutation = (
  options?: Partial<Options<DeleteWorkoutsByIdData>>,
): UseMutationOptions<
  DeleteWorkoutsByIdResponse,
  AxiosError<DeleteWorkoutsByIdError>,
  Options<DeleteWorkoutsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteWorkoutsByIdResponse,
    AxiosError<DeleteWorkoutsByIdError>,
    Options<DeleteWorkoutsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteWorkoutsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getWorkoutsByIdQueryKey = (
  options: Options<GetWorkoutsByIdData>,
) => createQueryKey("getWorkoutsById", options);

export const getWorkoutsByIdOptions = (
  options: Options<GetWorkoutsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getWorkoutsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getWorkoutsByIdQueryKey(options),
  });
};

export const patchWorkoutsByIdMutation = (
  options?: Partial<Options<PatchWorkoutsByIdData>>,
): UseMutationOptions<
  PatchWorkoutsByIdResponse,
  AxiosError<PatchWorkoutsByIdError>,
  Options<PatchWorkoutsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchWorkoutsByIdResponse,
    AxiosError<PatchWorkoutsByIdError>,
    Options<PatchWorkoutsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchWorkoutsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postWeightQueryKey = (options?: Options<PostWeightData>) =>
  createQueryKey("postWeight", options);

export const postWeightOptions = (options?: Options<PostWeightData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postWeight({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postWeightQueryKey(options),
  });
};

export const postWeightMutation = (
  options?: Partial<Options<PostWeightData>>,
): UseMutationOptions<
  PostWeightResponse,
  AxiosError<PostWeightError>,
  Options<PostWeightData>
> => {
  const mutationOptions: UseMutationOptions<
    PostWeightResponse,
    AxiosError<PostWeightError>,
    Options<PostWeightData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postWeight({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getEntriesQueryKey = (options?: Options<GetEntriesData>) =>
  createQueryKey("getEntries", options);

export const getEntriesOptions = (options?: Options<GetEntriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEntries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEntriesQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getEntriesInfiniteQueryKey = (
  options?: Options<GetEntriesData>,
): QueryKey<Options<GetEntriesData>> =>
  createQueryKey("getEntries", options, true);

export const getEntriesInfiniteOptions = (
  options?: Options<GetEntriesData>,
) => {
  return infiniteQueryOptions<
    GetEntriesResponse,
    AxiosError<GetEntriesError>,
    InfiniteData<GetEntriesResponse>,
    QueryKey<Options<GetEntriesData>>,
    | number
    | Pick<
        QueryKey<Options<GetEntriesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetEntriesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getEntries({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getEntriesInfiniteQueryKey(options),
    },
  );
};

export const getEntriesTypesQueryKey = (
  options?: Options<GetEntriesTypesData>,
) => createQueryKey("getEntriesTypes", options);

export const getEntriesTypesOptions = (
  options?: Options<GetEntriesTypesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEntriesTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEntriesTypesQueryKey(options),
  });
};
