// This file is auto-generated by @hey-api/openapi-ts

export type Exercise = {
  id: number;
  name: string;
  description: string | null;
  difficulty: number | null;
  equipment:
    | 'rowing'
    | 'swimming'
    | 'plate loaded'
    | 'foam roller'
    | 'pullup bar'
    | 'stair climber'
    | 'selectorized'
    | 'dip bar'
    | 'preacher'
    | 'hyperextension'
    | 'sandbag'
    | 'elliptical'
    | 'chair'
    | 'cable'
    | "captain's chair"
    | 'towel'
    | 'water bottle'
    | 'stability ball'
    | 'table'
    | 'smith'
    | 'kettlebell'
    | 'cycling'
    | 'step aerobics'
    | 'plate'
    | 'platform'
    | 'medicine ball'
    | 'running'
    | 'barbell'
    | 'backpack'
    | 'ez curl bar'
    | 'walking'
    | 'bench'
    | 'bodyweight'
    | 'resistance band'
    | 'dumbbell'
    | 'jump rope'
    | 'treadmill'
    | 'bosu ball'
    | null;
  images: Array<string>;
  params: Array<number>;
  userId: number | null;
  copiedFromId: number | null;
  parentExerciseId: number | null;
  createdAt: Date;
  updatedAt: Date | null;
  deletedAt: Date | null;
  muscles: {
    primary: Array<
      | 'Lower Back'
      | 'Soleus'
      | 'Front Deltoids'
      | 'Lats'
      | 'Forearms'
      | 'Pecs'
      | 'Hamstrings'
      | 'Wrist Flexors'
      | 'Biceps'
      | 'Triceps'
      | 'Rear Deltoids'
      | 'Rotator Cuff'
      | 'Ankle'
      | 'Abdominals'
      | 'Glutes'
      | 'Quadriceps'
      | 'Obliques'
      | 'Abductors'
      | 'Gastrocnemius'
      | 'Lateral Deltoids'
      | 'Hip Flexors'
      | 'Trapezius'
      | 'Neck'
      | 'Adductors'
    >;
    secondary: Array<
      | 'Lower Back'
      | 'Soleus'
      | 'Front Deltoids'
      | 'Lats'
      | 'Forearms'
      | 'Pecs'
      | 'Hamstrings'
      | 'Wrist Flexors'
      | 'Biceps'
      | 'Triceps'
      | 'Rear Deltoids'
      | 'Rotator Cuff'
      | 'Ankle'
      | 'Abdominals'
      | 'Glutes'
      | 'Quadriceps'
      | 'Obliques'
      | 'Abductors'
      | 'Gastrocnemius'
      | 'Lateral Deltoids'
      | 'Hip Flexors'
      | 'Trapezius'
      | 'Neck'
      | 'Adductors'
    >;
  };
  variations: Array<{
    id: number;
    name: string;
    description: string | null;
    difficulty: number | null;
    equipment:
      | 'rowing'
      | 'swimming'
      | 'plate loaded'
      | 'foam roller'
      | 'pullup bar'
      | 'stair climber'
      | 'selectorized'
      | 'dip bar'
      | 'preacher'
      | 'hyperextension'
      | 'sandbag'
      | 'elliptical'
      | 'chair'
      | 'cable'
      | "captain's chair"
      | 'towel'
      | 'water bottle'
      | 'stability ball'
      | 'table'
      | 'smith'
      | 'kettlebell'
      | 'cycling'
      | 'step aerobics'
      | 'plate'
      | 'platform'
      | 'medicine ball'
      | 'running'
      | 'barbell'
      | 'backpack'
      | 'ez curl bar'
      | 'walking'
      | 'bench'
      | 'bodyweight'
      | 'resistance band'
      | 'dumbbell'
      | 'jump rope'
      | 'treadmill'
      | 'bosu ball'
      | null;
    images: Array<string>;
    params: Array<number>;
    userId: number | null;
    copiedFromId: number | null;
    parentExerciseId: number | null;
    createdAt: Date;
    updatedAt: Date | null;
    deletedAt: Date | null;
    muscles: {
      primary: Array<
        | 'Lower Back'
        | 'Soleus'
        | 'Front Deltoids'
        | 'Lats'
        | 'Forearms'
        | 'Pecs'
        | 'Hamstrings'
        | 'Wrist Flexors'
        | 'Biceps'
        | 'Triceps'
        | 'Rear Deltoids'
        | 'Rotator Cuff'
        | 'Ankle'
        | 'Abdominals'
        | 'Glutes'
        | 'Quadriceps'
        | 'Obliques'
        | 'Abductors'
        | 'Gastrocnemius'
        | 'Lateral Deltoids'
        | 'Hip Flexors'
        | 'Trapezius'
        | 'Neck'
        | 'Adductors'
      >;
      secondary: Array<
        | 'Lower Back'
        | 'Soleus'
        | 'Front Deltoids'
        | 'Lats'
        | 'Forearms'
        | 'Pecs'
        | 'Hamstrings'
        | 'Wrist Flexors'
        | 'Biceps'
        | 'Triceps'
        | 'Rear Deltoids'
        | 'Rotator Cuff'
        | 'Ankle'
        | 'Abdominals'
        | 'Glutes'
        | 'Quadriceps'
        | 'Obliques'
        | 'Abductors'
        | 'Gastrocnemius'
        | 'Lateral Deltoids'
        | 'Hip Flexors'
        | 'Trapezius'
        | 'Neck'
        | 'Adductors'
      >;
    };
  }>;
};

export type ExerciseUpsertDto = {
  id: number | null;
  name: string;
  description: string | null;
  difficulty: number | null;
  equipment:
    | 'rowing'
    | 'swimming'
    | 'plate loaded'
    | 'foam roller'
    | 'pullup bar'
    | 'stair climber'
    | 'selectorized'
    | 'dip bar'
    | 'preacher'
    | 'hyperextension'
    | 'sandbag'
    | 'elliptical'
    | 'chair'
    | 'cable'
    | "captain's chair"
    | 'towel'
    | 'water bottle'
    | 'stability ball'
    | 'table'
    | 'smith'
    | 'kettlebell'
    | 'cycling'
    | 'step aerobics'
    | 'plate'
    | 'platform'
    | 'medicine ball'
    | 'running'
    | 'barbell'
    | 'backpack'
    | 'ez curl bar'
    | 'walking'
    | 'bench'
    | 'bodyweight'
    | 'resistance band'
    | 'dumbbell'
    | 'jump rope'
    | 'treadmill'
    | 'bosu ball'
    | null;
  images: Array<string>;
  params: Array<number>;
  copiedFromId: number | null;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
};

export type Workout = {
  id: number;
  typeId: number | null;
  userId: number;
  calories: number;
  start: Date;
  end: Date | null;
  createdAt: Date;
  updatedAt: Date | null;
  deletedAt: Date | null;
  exercises: Array<WorkoutExercise>;
};

export type WorkoutExercise = {
  id: number;
  workoutId: number;
  userId: number;
  exerciseId: number;
  createdAt: Date;
  updatedAt: Date | null;
  exercise: {
    id: number;
    name: string;
    description: string | null;
    difficulty: number | null;
    equipment:
      | 'rowing'
      | 'swimming'
      | 'plate loaded'
      | 'foam roller'
      | 'pullup bar'
      | 'stair climber'
      | 'selectorized'
      | 'dip bar'
      | 'preacher'
      | 'hyperextension'
      | 'sandbag'
      | 'elliptical'
      | 'chair'
      | 'cable'
      | "captain's chair"
      | 'towel'
      | 'water bottle'
      | 'stability ball'
      | 'table'
      | 'smith'
      | 'kettlebell'
      | 'cycling'
      | 'step aerobics'
      | 'plate'
      | 'platform'
      | 'medicine ball'
      | 'running'
      | 'barbell'
      | 'backpack'
      | 'ez curl bar'
      | 'walking'
      | 'bench'
      | 'bodyweight'
      | 'resistance band'
      | 'dumbbell'
      | 'jump rope'
      | 'treadmill'
      | 'bosu ball'
      | null;
    images: Array<string>;
    params: Array<number>;
    userId: number | null;
    copiedFromId: number | null;
    parentExerciseId: number | null;
    createdAt: Date;
    updatedAt: Date | null;
    deletedAt: Date | null;
  };
  sets: Array<WorkoutExerciseSet>;
};

export type WorkoutExerciseSet = {
  id: number;
  exerciseId: number;
  workoutId: number;
  userId: number;
  workoutExerciseId: number;
  start: Date | null;
  end: Date | null;
  weight: number | null;
  reps: number | null;
  createdAt: Date;
  updatedAt: Date | null;
};

export type WorkoutUpsertDto = {
  id?: number;
  typeId: number | null;
  calories: number;
  start: Date;
  end: Date | null;
  createdAt: Date;
  updatedAt: Date | null;
  deletedAt: Date | null;
  exercises: Array<{
    exerciseId: number;
    createdAt: Date;
    updatedAt: Date | null;
    sets: Array<{
      id?: number;
      start: Date | null;
      end: Date | null;
      weight: number | null;
      reps: number | null;
      createdAt: Date;
      updatedAt: Date | null;
    }>;
  }>;
};

export type WorkoutUpdateDto = {
  typeId: number | null;
  calories: number;
  start: Date;
  end: Date | null;
  deletedAt: Date | null;
  exercises: Array<{
    exerciseId: number;
    sets: Array<WorkoutExerciseSetUpdateDto>;
  }>;
  createdAt: Date;
  updatedAt: Date | null;
};

export type WorkoutExerciseSetUpdateDto = {
  start: Date | null;
  end: Date | null;
  weight: number | null;
  reps: number | null;
  createdAt: Date;
  updatedAt: Date | null;
};

export type Weight = {
  id: number;
  externalId: string | null;
  userId: number;
  weight: number;
  units: string;
  createdAt: Date;
  updatedAt: Date | null;
  deletedAt: Date | null;
};

export type ArgusCheckinType =
  | 'steps'
  | 'weather'
  | 'calories'
  | 'food'
  | 'activity'
  | 'weight'
  | 'consumedcalories'
  | 'drink'
  | 'heartrate'
  | 'status'
  | 'bodymetrics'
  | 'workout_log'
  | 'sleepreport'
  | 'fitnesstest';

export const ArgusCheckinType = {
  STEPS: 'steps',
  WEATHER: 'weather',
  CALORIES: 'calories',
  FOOD: 'food',
  ACTIVITY: 'activity',
  WEIGHT: 'weight',
  CONSUMEDCALORIES: 'consumedcalories',
  DRINK: 'drink',
  HEARTRATE: 'heartrate',
  STATUS: 'status',
  BODYMETRICS: 'bodymetrics',
  WORKOUT_LOG: 'workout_log',
  SLEEPREPORT: 'sleepreport',
  FITNESSTEST: 'fitnesstest',
} as const;

export type PostAuthRegisterData = {
  body?: {
    name: string;
    email: string;
    password: string;
    passwordConfirmation: string;
  };
  path?: never;
  query?: never;
  url: '/auth/register';
};

export type PostAuthRegisterErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PostAuthRegisterError =
  PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
    email: string;
    name: string;
    jwt: string;
  };
};

export type PostAuthRegisterResponse =
  PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthLoginData = {
  body?: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: '/auth/login';
};

export type PostAuthLoginErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
    email: string;
    name: string;
    jwt: string;
  };
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type GetExercisesData = {
  body?: never;
  path?: never;
  query?: {
    filter?: string;
    updatedAfter?: Date;
  };
  url: '/exercises';
};

export type GetExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetExercisesError = GetExercisesErrors[keyof GetExercisesErrors];

export type GetExercisesResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<Exercise>;
  };
};

export type GetExercisesResponse =
  GetExercisesResponses[keyof GetExercisesResponses];

export type PostExercisesData = {
  body?: {
    name: string;
  };
  path?: never;
  query?: never;
  url: '/exercises';
};

export type PostExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PostExercisesError = PostExercisesErrors[keyof PostExercisesErrors];

export type PostExercisesResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PostExercisesResponse =
  PostExercisesResponses[keyof PostExercisesResponses];

export type PutExercisesData = {
  body?: {
    items: Array<ExerciseUpsertDto>;
  };
  path?: never;
  query?: never;
  url: '/exercises';
};

export type PutExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PutExercisesError = PutExercisesErrors[keyof PutExercisesErrors];

export type PutExercisesResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<{
      id: number;
      name: string;
      description: string | null;
      difficulty: number | null;
      equipment:
        | 'rowing'
        | 'swimming'
        | 'plate loaded'
        | 'foam roller'
        | 'pullup bar'
        | 'stair climber'
        | 'selectorized'
        | 'dip bar'
        | 'preacher'
        | 'hyperextension'
        | 'sandbag'
        | 'elliptical'
        | 'chair'
        | 'cable'
        | "captain's chair"
        | 'towel'
        | 'water bottle'
        | 'stability ball'
        | 'table'
        | 'smith'
        | 'kettlebell'
        | 'cycling'
        | 'step aerobics'
        | 'plate'
        | 'platform'
        | 'medicine ball'
        | 'running'
        | 'barbell'
        | 'backpack'
        | 'ez curl bar'
        | 'walking'
        | 'bench'
        | 'bodyweight'
        | 'resistance band'
        | 'dumbbell'
        | 'jump rope'
        | 'treadmill'
        | 'bosu ball'
        | null;
      images: Array<string>;
      params: Array<number>;
      userId: number | null;
      copiedFromId: number | null;
      parentExerciseId: number | null;
      createdAt: Date;
      updatedAt: Date | null;
      deletedAt: Date | null;
    }>;
  };
};

export type PutExercisesResponse =
  PutExercisesResponses[keyof PutExercisesResponses];

export type GetExercisesBuiltInData = {
  body?: never;
  path?: never;
  query?: {
    filter?: string;
    muscle?:
      | Array<
          | 'Lower Back'
          | 'Soleus'
          | 'Front Deltoids'
          | 'Lats'
          | 'Forearms'
          | 'Pecs'
          | 'Hamstrings'
          | 'Wrist Flexors'
          | 'Biceps'
          | 'Triceps'
          | 'Rear Deltoids'
          | 'Rotator Cuff'
          | 'Ankle'
          | 'Abdominals'
          | 'Glutes'
          | 'Quadriceps'
          | 'Obliques'
          | 'Abductors'
          | 'Gastrocnemius'
          | 'Lateral Deltoids'
          | 'Hip Flexors'
          | 'Trapezius'
          | 'Neck'
          | 'Adductors'
        >
      | 'Lower Back'
      | 'Soleus'
      | 'Front Deltoids'
      | 'Lats'
      | 'Forearms'
      | 'Pecs'
      | 'Hamstrings'
      | 'Wrist Flexors'
      | 'Biceps'
      | 'Triceps'
      | 'Rear Deltoids'
      | 'Rotator Cuff'
      | 'Ankle'
      | 'Abdominals'
      | 'Glutes'
      | 'Quadriceps'
      | 'Obliques'
      | 'Abductors'
      | 'Gastrocnemius'
      | 'Lateral Deltoids'
      | 'Hip Flexors'
      | 'Trapezius'
      | 'Neck'
      | 'Adductors';
  };
  url: '/exercises/built-in';
};

export type GetExercisesBuiltInErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetExercisesBuiltInError =
  GetExercisesBuiltInErrors[keyof GetExercisesBuiltInErrors];

export type GetExercisesBuiltInResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<Exercise>;
  };
};

export type GetExercisesBuiltInResponse =
  GetExercisesBuiltInResponses[keyof GetExercisesBuiltInResponses];

export type DeleteExercisesByIdData = {
  body?: unknown;
  path: {
    id: number;
  };
  query?: never;
  url: '/exercises/{id}';
};

export type DeleteExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type DeleteExercisesByIdError =
  DeleteExercisesByIdErrors[keyof DeleteExercisesByIdErrors];

export type DeleteExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteExercisesByIdResponse =
  DeleteExercisesByIdResponses[keyof DeleteExercisesByIdResponses];

export type GetExercisesByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/exercises/{id}';
};

export type GetExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetExercisesByIdError =
  GetExercisesByIdErrors[keyof GetExercisesByIdErrors];

export type GetExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    item: Exercise;
  };
};

export type GetExercisesByIdResponse =
  GetExercisesByIdResponses[keyof GetExercisesByIdResponses];

export type PatchExercisesByIdData = {
  body?: {
    name: string;
    description: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: '/exercises/{id}';
};

export type PatchExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PatchExercisesByIdError =
  PatchExercisesByIdErrors[keyof PatchExercisesByIdErrors];

export type PatchExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PatchExercisesByIdResponse =
  PatchExercisesByIdResponses[keyof PatchExercisesByIdResponses];

export type GetWorkoutsData = {
  body?: never;
  path?: never;
  query?: {
    updatedAfter?: Date;
    page?: number;
  };
  url: '/workouts';
};

export type GetWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetWorkoutsError = GetWorkoutsErrors[keyof GetWorkoutsErrors];

export type GetWorkoutsResponses = {
  /**
   * Good Response
   */
  200: {
    /**
     * Page or items
     */
    items: Array<Workout>;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetWorkoutsResponse =
  GetWorkoutsResponses[keyof GetWorkoutsResponses];

export type PostWorkoutsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: '/workouts';
};

export type PostWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PostWorkoutsError = PostWorkoutsErrors[keyof PostWorkoutsErrors];

export type PostWorkoutsResponses = {
  /**
   * Good Response
   */
  200: {
    id: number;
  };
};

export type PostWorkoutsResponse =
  PostWorkoutsResponses[keyof PostWorkoutsResponses];

export type PutWorkoutsData = {
  body?: {
    items: Array<WorkoutUpsertDto>;
  };
  path?: never;
  query?: never;
  url: '/workouts';
};

export type PutWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PutWorkoutsError = PutWorkoutsErrors[keyof PutWorkoutsErrors];

export type PutWorkoutsResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<{
      id: number;
      typeId: number | null;
      userId: number;
      calories: number;
      start: Date;
      end: Date | null;
      createdAt: Date;
      updatedAt: Date | null;
      deletedAt: Date | null;
    }>;
  };
};

export type PutWorkoutsResponse =
  PutWorkoutsResponses[keyof PutWorkoutsResponses];

export type DeleteWorkoutsByIdData = {
  body?: unknown;
  path: {
    id: number;
  };
  query?: never;
  url: '/workouts/{id}';
};

export type DeleteWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type DeleteWorkoutsByIdError =
  DeleteWorkoutsByIdErrors[keyof DeleteWorkoutsByIdErrors];

export type DeleteWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteWorkoutsByIdResponse =
  DeleteWorkoutsByIdResponses[keyof DeleteWorkoutsByIdResponses];

export type GetWorkoutsByIdData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/workouts/{id}';
};

export type GetWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetWorkoutsByIdError =
  GetWorkoutsByIdErrors[keyof GetWorkoutsByIdErrors];

export type GetWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    item: Workout;
  };
};

export type GetWorkoutsByIdResponse =
  GetWorkoutsByIdResponses[keyof GetWorkoutsByIdResponses];

export type PatchWorkoutsByIdData = {
  body?: WorkoutUpdateDto;
  path: {
    id: number;
  };
  query?: never;
  url: '/workouts/{id}';
};

export type PatchWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PatchWorkoutsByIdError =
  PatchWorkoutsByIdErrors[keyof PatchWorkoutsByIdErrors];

export type PatchWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: {
    success: boolean;
  };
};

export type PatchWorkoutsByIdResponse =
  PatchWorkoutsByIdResponses[keyof PatchWorkoutsByIdResponses];

export type PostWeightData = {
  body?: {
    weight: number;
  };
  path?: never;
  query?: never;
  url: '/weight';
};

export type PostWeightErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type PostWeightError = PostWeightErrors[keyof PostWeightErrors];

export type PostWeightResponses = {
  /**
   * Good Response
   */
  200: Weight;
};

export type PostWeightResponse = PostWeightResponses[keyof PostWeightResponses];

export type GetArgusCheckinData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    type?:
      | 'steps'
      | 'weather'
      | 'calories'
      | 'food'
      | 'activity'
      | 'weight'
      | 'consumedcalories'
      | 'drink'
      | 'heartrate'
      | 'status'
      | 'bodymetrics'
      | 'workout_log'
      | 'sleepreport'
      | 'fitnesstest';
  };
  url: '/argus/checkin';
};

export type GetArgusCheckinErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetArgusCheckinError =
  GetArgusCheckinErrors[keyof GetArgusCheckinErrors];

export type GetArgusCheckinResponses = {
  /**
   * Good Response
   */
  200: {
    /**
     * Page or items
     */
    items: Array<
      | {
          id: number;
          externalId: string;
          type: 'steps';
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
          subtype: null;
        }
      | {
          id: number;
          externalId: string;
          type: 'activity';
          subtype: 'workout';
          data: {
            id: number;
            type: 'activity';
            created: number;
            user_id: number;
            timestamp: number;
            subtype: 'workout';
            activeDuration?: number;
            duration?: number;
            calories?: number;
            TotalExercisesInWorkout?: number;
            end: number;
            start: number;
            exercises?: Array<{
              exercise_id: string;
              exercise_name: string;
              exercise_type: string;
              sets: Array<{
                draft?: boolean;
                reps?: number;
                weight?: number;
              }>;
            }>;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'weather';
          subtype: null;
          data: {
            id: number;
            type: 'weather';
            created: number;
            user_id: number;
            timestamp: number;
            temperature_current: number;
            temperature_high: number;
            temperature_low: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'activity';
          subtype: 'weightlifting';
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'weight';
          subtype: null;
          data: {
            id: number;
            type: 'weight';
            created: number;
            user_id: number;
            timestamp: number;
            value: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'activity';
          subtype: 'walking';
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'calories';
          subtype: null;
          data: {
            calories: number;
            [key: string]: unknown | number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'consumedcalories';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'drink';
          subtype: 'coffee' | 'water';
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'workout_log';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'fitnesstest';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'sleepreport';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'bodymetrics';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'status';
          subtype: null;
          data: {
            note: string;
            photos?: Array<{
              id: string;
              href: string;
            }>;
            [key: string]:
              | unknown
              | string
              | Array<{
                  id: string;
                  href: string;
                }>
              | undefined;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'heartrate';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: 'food';
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
    >;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetArgusCheckinResponse =
  GetArgusCheckinResponses[keyof GetArgusCheckinResponses];

export type GetArgusCheckinTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/argus/checkin/types';
};

export type GetArgusCheckinTypesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: 'ValidationFailed';
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: 'Query' | 'Path' | 'Body' | 'Response';
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: 'ActionError';
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | 'InvalidPassword'
            | 'EmailAlreadyExists'
            | 'WorkoutNotFound';
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'Unauthorized';
    };
  };
  /**
   * Unknown Error
   */
  500: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: 'UnknownError';
    };
  };
};

export type GetArgusCheckinTypesError =
  GetArgusCheckinTypesErrors[keyof GetArgusCheckinTypesErrors];

export type GetArgusCheckinTypesResponses = {
  /**
   * Good Response
   */
  200: {
    items: Array<ArgusCheckinType>;
  };
};

export type GetArgusCheckinTypesResponse =
  GetArgusCheckinTypesResponses[keyof GetArgusCheckinTypesResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}/api` | (string & {});
};
