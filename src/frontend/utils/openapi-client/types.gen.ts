// This file is auto-generated by @hey-api/openapi-ts

/**
 * User object used for authentication purposes. Non public and contains private information.
 */
export type AuthUser = {
  /**
   * Id of the user
   */
  id: number;
  /**
   * Email of the user
   */
  email: string;
  /**
   * Name of the user
   */
  name: string;
  /**
   * JWT token. Used in API requests for authentication.
   */
  jwt: string;
};

/**
 * Error response
 */
export type UnknownErrorResponse = {
  /**
   * Code to handle on the frontend
   */
  code: "UnknownError";
};

/**
 * Exercise. Either from built-in library or created by a user.
 */
export type Exercise = {
  /**
   * Id of the exercise
   */
  id: number;
  /**
   * Exercise Name
   */
  name: string;
  /**
   * Description and instructions on how to perform this exercise
   */
  description: string | null;
  /**
   * How difficult is this exercise
   */
  difficulty: number | null;
  /**
   * Equipmnet required to perform exercise
   */
  equipment:
    | "rowing"
    | "swimming"
    | "plate loaded"
    | "foam roller"
    | "pullup bar"
    | "stair climber"
    | "selectorized"
    | "dip bar"
    | "preacher"
    | "hyperextension"
    | "sandbag"
    | "elliptical"
    | "chair"
    | "cable"
    | "captain's chair"
    | "towel"
    | "water bottle"
    | "stability ball"
    | "table"
    | "smith"
    | "kettlebell"
    | "cycling"
    | "step aerobics"
    | "plate"
    | "platform"
    | "medicine ball"
    | "running"
    | "barbell"
    | "backpack"
    | "ez curl bar"
    | "walking"
    | "bench"
    | "bodyweight"
    | "resistance band"
    | "dumbbell"
    | "jump rope"
    | "treadmill"
    | "bosu ball"
    | null;
  /**
   * List of images for this exercise
   */
  images: Array<string>;
  /**
   * Types of the parameters, such as: weight, reps, duration
   */
  params: Array<number>;
  /**
   * Id of the user excercise belongs to
   */
  userId: number | null;
  /**
   * Id of exercise from built-in library this excersize was copied from. Only relevant to exercises created by users
   */
  copiedFromId: number | null;
  /**
   * Id of the parent exercises. If this id is not NULL then this excercise is a variation of another exercise
   */
  parentExerciseId: number | null;
  /**
   * Date the creation
   */
  createdAt: Date;
  /**
   * Date of last update
   */
  updatedAt: Date | null;
  /**
   * Date of deletion. Deleted exercises are not accessible to users.
   */
  deletedAt: Date | null;
  /**
   * List of muscles involved in this excercise
   */
  muscles: {
    /**
     * List of primary muscles this exercise targets
     */
    primary: Array<Muscle>;
    /**
     * List of secondary muscles this exercise targets
     */
    secondary: Array<Muscle>;
  };
  /**
   * List of variations of this excercise. This nesting is usually used to avoid cluttering in lists on the frontend side.
   */
  variations: Array<{
    /**
     * Id of the exercise
     */
    id: number;
    /**
     * Exercise Name
     */
    name: string;
    /**
     * Description and instructions on how to perform this exercise
     */
    description: string | null;
    /**
     * How difficult is this exercise
     */
    difficulty: number | null;
    /**
     * Equipmnet required to perform exercise
     */
    equipment:
      | "rowing"
      | "swimming"
      | "plate loaded"
      | "foam roller"
      | "pullup bar"
      | "stair climber"
      | "selectorized"
      | "dip bar"
      | "preacher"
      | "hyperextension"
      | "sandbag"
      | "elliptical"
      | "chair"
      | "cable"
      | "captain's chair"
      | "towel"
      | "water bottle"
      | "stability ball"
      | "table"
      | "smith"
      | "kettlebell"
      | "cycling"
      | "step aerobics"
      | "plate"
      | "platform"
      | "medicine ball"
      | "running"
      | "barbell"
      | "backpack"
      | "ez curl bar"
      | "walking"
      | "bench"
      | "bodyweight"
      | "resistance band"
      | "dumbbell"
      | "jump rope"
      | "treadmill"
      | "bosu ball"
      | null;
    /**
     * List of images for this exercise
     */
    images: Array<string>;
    /**
     * Types of the parameters, such as: weight, reps, duration
     */
    params: Array<number>;
    /**
     * Id of the user excercise belongs to
     */
    userId: number | null;
    /**
     * Id of exercise from built-in library this excersize was copied from. Only relevant to exercises created by users
     */
    copiedFromId: number | null;
    /**
     * Id of the parent exercises. If this id is not NULL then this excercise is a variation of another exercise
     */
    parentExerciseId: number | null;
    /**
     * Date the creation
     */
    createdAt: Date;
    /**
     * Date of last update
     */
    updatedAt: Date | null;
    /**
     * Date of deletion. Deleted exercises are not accessible to users.
     */
    deletedAt: Date | null;
    /**
     * List of muscles involved in this excercise
     */
    muscles: {
      /**
       * List of primary muscles this exercise targets
       */
      primary: Array<Muscle>;
      /**
       * List of secondary muscles this exercise targets
       */
      secondary: Array<Muscle>;
    };
  }>;
};

/**
 * Muscle
 */
export type Muscle =
  | "Lower Back"
  | "Soleus"
  | "Front Deltoids"
  | "Lats"
  | "Forearms"
  | "Pecs"
  | "Hamstrings"
  | "Wrist Flexors"
  | "Biceps"
  | "Triceps"
  | "Rear Deltoids"
  | "Rotator Cuff"
  | "Ankle"
  | "Abdominals"
  | "Glutes"
  | "Quadriceps"
  | "Obliques"
  | "Abductors"
  | "Gastrocnemius"
  | "Lateral Deltoids"
  | "Hip Flexors"
  | "Trapezius"
  | "Neck"
  | "Adductors";

/**
 * Muscle
 */
export const Muscle = {
  LOWER_BACK: "Lower Back",
  SOLEUS: "Soleus",
  FRONT_DELTOIDS: "Front Deltoids",
  LATS: "Lats",
  FOREARMS: "Forearms",
  PECS: "Pecs",
  HAMSTRINGS: "Hamstrings",
  WRIST_FLEXORS: "Wrist Flexors",
  BICEPS: "Biceps",
  TRICEPS: "Triceps",
  REAR_DELTOIDS: "Rear Deltoids",
  ROTATOR_CUFF: "Rotator Cuff",
  ANKLE: "Ankle",
  ABDOMINALS: "Abdominals",
  GLUTES: "Glutes",
  QUADRICEPS: "Quadriceps",
  OBLIQUES: "Obliques",
  ABDUCTORS: "Abductors",
  GASTROCNEMIUS: "Gastrocnemius",
  LATERAL_DELTOIDS: "Lateral Deltoids",
  HIP_FLEXORS: "Hip Flexors",
  TRAPEZIUS: "Trapezius",
  NECK: "Neck",
  ADDUCTORS: "Adductors",
} as const;

/**
 * Exercise. Either from built-in library or created by a user.
 */
export type ExerciseUpsertDto = {
  /**
   * Id of the exercise
   */
  id: number | null;
  /**
   * Exercise Name
   */
  name: string;
  /**
   * Description and instructions on how to perform this exercise
   */
  description: string | null;
  /**
   * How difficult is this exercise
   */
  difficulty: number | null;
  /**
   * Equipmnet required to perform exercise
   */
  equipment:
    | "rowing"
    | "swimming"
    | "plate loaded"
    | "foam roller"
    | "pullup bar"
    | "stair climber"
    | "selectorized"
    | "dip bar"
    | "preacher"
    | "hyperextension"
    | "sandbag"
    | "elliptical"
    | "chair"
    | "cable"
    | "captain's chair"
    | "towel"
    | "water bottle"
    | "stability ball"
    | "table"
    | "smith"
    | "kettlebell"
    | "cycling"
    | "step aerobics"
    | "plate"
    | "platform"
    | "medicine ball"
    | "running"
    | "barbell"
    | "backpack"
    | "ez curl bar"
    | "walking"
    | "bench"
    | "bodyweight"
    | "resistance band"
    | "dumbbell"
    | "jump rope"
    | "treadmill"
    | "bosu ball"
    | null;
  /**
   * List of images for this exercise
   */
  images: Array<string>;
  /**
   * Types of the parameters, such as: weight, reps, duration
   */
  params: Array<number>;
  /**
   * Id of exercise from built-in library this excersize was copied from. Only relevant to exercises created by users
   */
  copiedFromId: number | null;
  /**
   * Date of last update
   */
  createdAt: Date;
  /**
   * Date of deletion. Deleted exercises are not accessible to users.
   */
  updatedAt: Date;
  /**
   * Date of deletion. Deleted exercises are not accessible to users.
   */
  deletedAt: Date | null;
};

/**
 * Gym Workout. Consists of performed excercises and sets.
 */
export type Workout = {
  /**
   * Id of the workout
   */
  id: number;
  /**
   * Id of the workout type. Users can create their own workout types as templates for workouts.
   */
  typeId: number | null;
  /**
   * Id of the user that created this workout
   */
  userId: number;
  /**
   * Calories burned during workout
   */
  calories: number;
  /**
   * Time when workout started
   */
  start: Date;
  /**
   * Time when workout finished
   */
  end: Date | null;
  /**
   * Time when the workout was created. Not changeable by user
   */
  createdAt: Date;
  /**
   * The last time the workout was updated
   */
  updatedAt: Date | null;
  /**
   * The time workout has been deleted. Users cannot access deleted workouts
   */
  deletedAt: Date | null;
  /**
   * List of the performed exercises
   */
  exercises: Array<WorkoutExercise>;
};

/**
 * Excercise performed during workout. Not to be confused with Excercise.
 */
export type WorkoutExercise = {
  /**
   * Id of the workout exercise
   */
  id: number;
  /**
   * Id of the workout
   */
  workoutId: number;
  /**
   * Id of the user
   */
  userId: number;
  /**
   * Id of the exercise
   */
  exerciseId: number;
  /**
   * The date the workout excercise was created
   */
  createdAt: Date;
  /**
   * The last time  the workout excercise was updated
   */
  updatedAt: Date | null;
  /**
   * Library excercise
   */
  exercise: Exercise;
  /**
   * List of sets performed for this excercise
   */
  sets: Array<WorkoutExerciseSet>;
};

/**
 * Set is a group of repetitionss performed back to back one after
 */
export type WorkoutExerciseSet = {
  /**
   * Id of the set
   */
  id: number;
  /**
   * Id of the excercise performed
   */
  exerciseId: number;
  /**
   * Id of the workout
   */
  workoutId: number;
  /**
   * User that performed this set
   */
  userId: number;
  /**
   * Id of the Workout Excercise.
   */
  workoutExerciseId: number;
  /**
   * The time when set started
   */
  start: Date | null;
  /**
   * The time set ended.
   */
  end: Date | null;
  /**
   * Weight in lifted in units that user is using
   */
  weight: number | null;
  /**
   * Number of repetitions
   */
  reps: number | null;
  /**
   * The date set was created
   */
  createdAt: Date;
  /**
   * The date set was last time updated
   */
  updatedAt: Date | null;
};

/**
 * Fields needed to update a workout
 */
export type WorkoutUpsertDto = {
  /**
   * Id of the workout
   */
  id?: number;
  /**
   * Id of the workout type. Users can create their own workout types as templates for workouts.
   */
  typeId: number | null;
  /**
   * Calories burned during workout
   */
  calories: number;
  /**
   * Time when workout started
   */
  start: Date;
  /**
   * Time when workout finished
   */
  end: Date | null;
  /**
   * Time when the workout was created. Not changeable by user
   */
  createdAt: Date;
  /**
   * The last time the workout was updated
   */
  updatedAt: Date | null;
  /**
   * The time workout has been deleted. Users cannot access deleted workouts
   */
  deletedAt: Date | null;
  /**
   * List of the performed exercises
   */
  exercises: Array<{
    /**
     * Id of the exercise
     */
    exerciseId: number;
    /**
     * The date the workout excercise was created
     */
    createdAt: Date;
    /**
     * The last time  the workout excercise was updated
     */
    updatedAt: Date | null;
    /**
     * List of sets performed for this excercise
     */
    sets: Array<{
      /**
       * Id of the set
       */
      id?: number;
      /**
       * The time when set started
       */
      start: Date | null;
      /**
       * The time set ended.
       */
      end: Date | null;
      /**
       * Weight in lifted in units that user is using
       */
      weight: number | null;
      /**
       * Number of repetitions
       */
      reps: number | null;
      /**
       * The date set was created
       */
      createdAt: Date;
      /**
       * The date set was last time updated
       */
      updatedAt: Date | null;
    }>;
  }>;
};

export type WorkoutUpdateDto = {
  /**
   * Id of the workout type. Users can create their own workout types as templates for workouts.
   */
  typeId: number | null;
  /**
   * Calories burned during workout
   */
  calories: number;
  /**
   * Time when workout started
   */
  start: Date;
  /**
   * Time when workout finished
   */
  end: Date | null;
  /**
   * The time workout has been deleted. Users cannot access deleted workouts
   */
  deletedAt: Date | null;
  /**
   * List of the performed exercises
   */
  exercises: Array<{
    /**
     * Id of the exercise
     */
    exerciseId: number;
    /**
     * List of sets performed for this excercise
     */
    sets: Array<WorkoutExerciseSetUpdateDto>;
  }>;
  /**
   * Time when the workout was created. Not changeable by user
   */
  createdAt: Date;
  /**
   * The last time the workout was updated
   */
  updatedAt: Date | null;
};

export type WorkoutExerciseSetUpdateDto = {
  /**
   * The time when set started
   */
  start: Date | null;
  /**
   * The time set ended.
   */
  end: Date | null;
  /**
   * Weight in lifted in units that user is using
   */
  weight: number | null;
  /**
   * Number of repetitions
   */
  reps: number | null;
  /**
   * The date set was created
   */
  createdAt: Date;
  /**
   * The date set was last time updated
   */
  updatedAt: Date | null;
};

/**
 * Weight record added by user
 */
export type Weight = {
  /**
   * Id of the weight record
   */
  id: number;
  /**
   * Id of the record in external source if it was imported.
   */
  externalId: string | null;
  /**
   * Id of the user
   */
  userId: number;
  /**
   * Weight value in orbitrary units
   */
  weight: number;
  /**
   * Units in which this weight record is calculdated
   */
  units: string;
  /**
   * The date record was created
   */
  createdAt: Date;
  /**
   * The date record was updated
   */
  updatedAt: Date | null;
  /**
   * The date record was deleted
   */
  deletedAt: Date | null;
};

/**
 * Possible types that Argus checkins can have.
 */
export type ArgusCheckinType =
  | "steps"
  | "weather"
  | "calories"
  | "food"
  | "activity"
  | "weight"
  | "consumedcalories"
  | "drink"
  | "heartrate"
  | "status"
  | "bodymetrics"
  | "workout_log"
  | "sleepreport"
  | "fitnesstest";

/**
 * Possible types that Argus checkins can have.
 */
export const ArgusCheckinType = {
  STEPS: "steps",
  WEATHER: "weather",
  CALORIES: "calories",
  FOOD: "food",
  ACTIVITY: "activity",
  WEIGHT: "weight",
  CONSUMEDCALORIES: "consumedcalories",
  DRINK: "drink",
  HEARTRATE: "heartrate",
  STATUS: "status",
  BODYMETRICS: "bodymetrics",
  WORKOUT_LOG: "workout_log",
  SLEEPREPORT: "sleepreport",
  FITNESSTEST: "fitnesstest",
} as const;

export type Entry = {
  /**
   * Id of an entry
   */
  id: number;
  user: User;
  /**
   * Entry type
   */
  type: "Weight" | "Workout";
  /**
   * Weight. Only for weight entries
   */
  weight?: Weight;
  /**
   * Workout. Only for workout entries.
   */
  workout?: Workout;
};

/**
 * User. Public representation of the user, should not contain sensitive data
 */
export type User = {
  /**
   * Id of the User
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Profile picture for display. Url of the image.
   */
  profilePicture: string;
};

export type PostAuthRegisterData = {
  body?: {
    /**
     * Name of the user. Displayed in the app.
     */
    name: string;
    /**
     * Email of the user. Stays hidden on public pages.
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Confirmation of password. Protection from typos
     */
    passwordConfirmation: string;
  };
  path?: never;
  query?: never;
  url: "/auth/register";
};

export type PostAuthRegisterErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PostAuthRegisterError =
  PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
  /**
   * Good Response
   */
  200: AuthUser;
};

export type PostAuthRegisterResponse =
  PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthLoginData = {
  body?: {
    /**
     * Email for the user account
     */
    email: string;
    /**
     * Password for the user account
     */
    password: string;
  };
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * Good Response
   */
  200: AuthUser;
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type GetExercisesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Filters exercises by name
     */
    filter?: string;
    /**
     * Filters excercises by muscles. Exercise must involve all muscles from the list.
     */
    muscle?:
      | Array<
          | "Lower Back"
          | "Soleus"
          | "Front Deltoids"
          | "Lats"
          | "Forearms"
          | "Pecs"
          | "Hamstrings"
          | "Wrist Flexors"
          | "Biceps"
          | "Triceps"
          | "Rear Deltoids"
          | "Rotator Cuff"
          | "Ankle"
          | "Abdominals"
          | "Glutes"
          | "Quadriceps"
          | "Obliques"
          | "Abductors"
          | "Gastrocnemius"
          | "Lateral Deltoids"
          | "Hip Flexors"
          | "Trapezius"
          | "Neck"
          | "Adductors"
        >
      | "Lower Back"
      | "Soleus"
      | "Front Deltoids"
      | "Lats"
      | "Forearms"
      | "Pecs"
      | "Hamstrings"
      | "Wrist Flexors"
      | "Biceps"
      | "Triceps"
      | "Rear Deltoids"
      | "Rotator Cuff"
      | "Ankle"
      | "Abdominals"
      | "Glutes"
      | "Quadriceps"
      | "Obliques"
      | "Abductors"
      | "Gastrocnemius"
      | "Lateral Deltoids"
      | "Hip Flexors"
      | "Trapezius"
      | "Neck"
      | "Adductors";
  };
  url: "/exercises";
};

export type GetExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetExercisesError = GetExercisesErrors[keyof GetExercisesErrors];

export type GetExercisesResponses = {
  /**
   * List of excercises
   */
  200: {
    /**
     * Page or items
     */
    items: Array<Exercise>;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetExercisesResponse =
  GetExercisesResponses[keyof GetExercisesResponses];

export type PostExercisesData = {
  body?: {
    /**
     * Name of the exercise
     */
    name: string;
  };
  path?: never;
  query?: never;
  url: "/exercises";
};

export type PostExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PostExercisesError = PostExercisesErrors[keyof PostExercisesErrors];

export type PostExercisesResponses = {
  /**
   * Good Response
   */
  200: Exercise;
};

export type PostExercisesResponse =
  PostExercisesResponses[keyof PostExercisesResponses];

export type PutExercisesData = {
  body?: {
    /**
     * List of exercises that contain updated fields
     */
    items: Array<ExerciseUpsertDto>;
  };
  path?: never;
  query?: never;
  url: "/exercises";
};

export type PutExercisesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PutExercisesError = PutExercisesErrors[keyof PutExercisesErrors];

export type PutExercisesResponses = {
  /**
   * List of updated exercises containing internal ids to match on device's database
   */
  200: {
    /**
     * List of updated exercises
     */
    items: Array<Exercise>;
  };
};

export type PutExercisesResponse =
  PutExercisesResponses[keyof PutExercisesResponses];

export type GetExercisesBuiltInData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Filters exercises by name
     */
    filter?: string;
    /**
     * Filters excercises by muscles. Exercise must involve all muscles from the list.
     */
    muscle?:
      | Array<
          | "Lower Back"
          | "Soleus"
          | "Front Deltoids"
          | "Lats"
          | "Forearms"
          | "Pecs"
          | "Hamstrings"
          | "Wrist Flexors"
          | "Biceps"
          | "Triceps"
          | "Rear Deltoids"
          | "Rotator Cuff"
          | "Ankle"
          | "Abdominals"
          | "Glutes"
          | "Quadriceps"
          | "Obliques"
          | "Abductors"
          | "Gastrocnemius"
          | "Lateral Deltoids"
          | "Hip Flexors"
          | "Trapezius"
          | "Neck"
          | "Adductors"
        >
      | "Lower Back"
      | "Soleus"
      | "Front Deltoids"
      | "Lats"
      | "Forearms"
      | "Pecs"
      | "Hamstrings"
      | "Wrist Flexors"
      | "Biceps"
      | "Triceps"
      | "Rear Deltoids"
      | "Rotator Cuff"
      | "Ankle"
      | "Abdominals"
      | "Glutes"
      | "Quadriceps"
      | "Obliques"
      | "Abductors"
      | "Gastrocnemius"
      | "Lateral Deltoids"
      | "Hip Flexors"
      | "Trapezius"
      | "Neck"
      | "Adductors";
  };
  url: "/exercises/built-in";
};

export type GetExercisesBuiltInErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetExercisesBuiltInError =
  GetExercisesBuiltInErrors[keyof GetExercisesBuiltInErrors];

export type GetExercisesBuiltInResponses = {
  /**
   * List of excercises
   */
  200: {
    /**
     * Page or items
     */
    items: Array<Exercise>;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetExercisesBuiltInResponse =
  GetExercisesBuiltInResponses[keyof GetExercisesBuiltInResponses];

export type DeleteExercisesByIdData = {
  body?: unknown;
  path: {
    /**
     * Id of the exercise
     */
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type DeleteExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type DeleteExercisesByIdError =
  DeleteExercisesByIdErrors[keyof DeleteExercisesByIdErrors];

export type DeleteExercisesByIdResponses = {
  /**
   * Indicator of successfult operation
   */
  200: {
    /**
     * Stub for response. Always true since otherwise error is thrown.
     */
    success: boolean;
  };
};

export type DeleteExercisesByIdResponse =
  DeleteExercisesByIdResponses[keyof DeleteExercisesByIdResponses];

export type GetExercisesByIdData = {
  body?: never;
  path: {
    /**
     * Id of the excercise
     */
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type GetExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetExercisesByIdError =
  GetExercisesByIdErrors[keyof GetExercisesByIdErrors];

export type GetExercisesByIdResponses = {
  /**
   * Good Response
   */
  200: Exercise;
};

export type GetExercisesByIdResponse =
  GetExercisesByIdResponses[keyof GetExercisesByIdResponses];

export type PatchExercisesByIdData = {
  body?: {
    /**
     * Name of the exercise
     */
    name: string;
    /**
     * Description of the exercise
     */
    description: string;
  };
  path: {
    /**
     * Id of the excercise
     */
    id: number;
  };
  query?: never;
  url: "/exercises/{id}";
};

export type PatchExercisesByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PatchExercisesByIdError =
  PatchExercisesByIdErrors[keyof PatchExercisesByIdErrors];

export type PatchExercisesByIdResponses = {
  /**
   * Indicator of successfult operation
   */
  200: {
    /**
     * Stub for response. Always true since otherwise error is thrown.
     */
    success: boolean;
  };
};

export type PatchExercisesByIdResponse =
  PatchExercisesByIdResponses[keyof PatchExercisesByIdResponses];

export type GetWorkoutsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Only return workouts updated after this date. Used for syncing.
     */
    updatedAfter?: Date;
    /**
     * Page
     */
    page?: number;
  };
  url: "/workouts";
};

export type GetWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetWorkoutsError = GetWorkoutsErrors[keyof GetWorkoutsErrors];

export type GetWorkoutsResponses = {
  /**
   * List of workouts
   */
  200: {
    /**
     * Page or items
     */
    items: Array<Workout>;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetWorkoutsResponse =
  GetWorkoutsResponses[keyof GetWorkoutsResponses];

export type PostWorkoutsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/workouts";
};

export type PostWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PostWorkoutsError = PostWorkoutsErrors[keyof PostWorkoutsErrors];

export type PostWorkoutsResponses = {
  /**
   * Good Response
   */
  200: Workout;
};

export type PostWorkoutsResponse =
  PostWorkoutsResponses[keyof PostWorkoutsResponses];

export type PutWorkoutsData = {
  body?: {
    /**
     * List of workouts to update or insert
     */
    items: Array<WorkoutUpsertDto>;
  };
  path?: never;
  query?: never;
  url: "/workouts";
};

export type PutWorkoutsErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PutWorkoutsError = PutWorkoutsErrors[keyof PutWorkoutsErrors];

export type PutWorkoutsResponses = {
  /**
   * List of updated or inserted workouts
   */
  200: {
    /**
     * List of updated or inserted workouts
     */
    items: Array<Workout>;
  };
};

export type PutWorkoutsResponse =
  PutWorkoutsResponses[keyof PutWorkoutsResponses];

export type DeleteWorkoutsByIdData = {
  body?: unknown;
  path: {
    /**
     * Id of the workout
     */
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type DeleteWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type DeleteWorkoutsByIdError =
  DeleteWorkoutsByIdErrors[keyof DeleteWorkoutsByIdErrors];

export type DeleteWorkoutsByIdResponses = {
  /**
   * Indicator of successfult operation
   */
  200: {
    /**
     * Stub for response. Always true since otherwise error is thrown.
     */
    success: boolean;
  };
};

export type DeleteWorkoutsByIdResponse =
  DeleteWorkoutsByIdResponses[keyof DeleteWorkoutsByIdResponses];

export type GetWorkoutsByIdData = {
  body?: never;
  path: {
    /**
     * Id of the workout
     */
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type GetWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetWorkoutsByIdError =
  GetWorkoutsByIdErrors[keyof GetWorkoutsByIdErrors];

export type GetWorkoutsByIdResponses = {
  /**
   * Workout
   */
  200: {
    item: Workout;
  };
};

export type GetWorkoutsByIdResponse =
  GetWorkoutsByIdResponses[keyof GetWorkoutsByIdResponses];

export type PatchWorkoutsByIdData = {
  body?: WorkoutUpdateDto;
  path: {
    /**
     * Workout Id
     */
    id: number;
  };
  query?: never;
  url: "/workouts/{id}";
};

export type PatchWorkoutsByIdErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PatchWorkoutsByIdError =
  PatchWorkoutsByIdErrors[keyof PatchWorkoutsByIdErrors];

export type PatchWorkoutsByIdResponses = {
  /**
   * Good Response
   */
  200: Workout;
};

export type PatchWorkoutsByIdResponse =
  PatchWorkoutsByIdResponses[keyof PatchWorkoutsByIdResponses];

export type PostWeightData = {
  body?: {
    /**
     * Weight value
     */
    weight: number;
  };
  path?: never;
  query?: never;
  url: "/weight";
};

export type PostWeightErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Unauthorized
   */
  401: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "Unauthorized";
    };
  };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type PostWeightError = PostWeightErrors[keyof PostWeightErrors];

export type PostWeightResponses = {
  /**
   * Good Response
   */
  200: Weight;
};

export type PostWeightResponse = PostWeightResponses[keyof PostWeightResponses];

export type GetArgusCheckinData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Filter by type of checkin
     */
    type?:
      | "steps"
      | "weather"
      | "calories"
      | "food"
      | "activity"
      | "weight"
      | "consumedcalories"
      | "drink"
      | "heartrate"
      | "status"
      | "bodymetrics"
      | "workout_log"
      | "sleepreport"
      | "fitnesstest";
  };
  url: "/argus/checkin";
};

export type GetArgusCheckinErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetArgusCheckinError =
  GetArgusCheckinErrors[keyof GetArgusCheckinErrors];

export type GetArgusCheckinResponses = {
  /**
   * List of Argus checkins
   */
  200: {
    /**
     * Page or items
     */
    items: Array<
      | {
          id: number;
          externalId: string;
          type: "steps";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
          subtype: null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "workout";
          data: {
            id: number;
            type: "activity";
            created: number;
            user_id: number;
            timestamp: number;
            subtype: "workout";
            activeDuration?: number;
            duration?: number;
            calories?: number;
            TotalExercisesInWorkout?: number;
            end: number;
            start: number;
            exercises?: Array<{
              exercise_id: string;
              exercise_name: string;
              exercise_type: string;
              sets: Array<{
                draft?: boolean;
                reps?: number;
                weight?: number;
              }>;
            }>;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "weather";
          subtype: null;
          data: {
            id: number;
            type: "weather";
            created: number;
            user_id: number;
            timestamp: number;
            temperature_current: number;
            temperature_high: number;
            temperature_low: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "weightlifting";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "weight";
          subtype: null;
          data: {
            id: number;
            type: "weight";
            created: number;
            user_id: number;
            timestamp: number;
            value: number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "activity";
          subtype: "walking";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "calories";
          subtype: null;
          data: {
            calories: number;
            [key: string]: unknown | number;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "consumedcalories";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "drink";
          subtype: "coffee" | "water";
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "workout_log";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "fitnesstest";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "sleepreport";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "bodymetrics";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "status";
          subtype: null;
          data: {
            note: string;
            photos?: Array<{
              id: string;
              href: string;
            }>;
            [key: string]:
              | unknown
              | string
              | Array<{
                  id: string;
                  href: string;
                }>
              | undefined;
          };
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "heartrate";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
      | {
          id: number;
          externalId: string;
          type: "food";
          subtype: null;
          data?: unknown;
          createdAt: Date;
          updatedAt: Date | null;
        }
    >;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetArgusCheckinResponse =
  GetArgusCheckinResponses[keyof GetArgusCheckinResponses];

export type GetArgusCheckinTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/argus/checkin/types";
};

export type GetArgusCheckinTypesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetArgusCheckinTypesError =
  GetArgusCheckinTypesErrors[keyof GetArgusCheckinTypesErrors];

export type GetArgusCheckinTypesResponses = {
  /**
   * Possible types that Argus checkins can have.
   */
  200: {
    /**
     * Possible types that Argus checkins can have.
     */
    items: Array<ArgusCheckinType>;
  };
};

export type GetArgusCheckinTypesResponse =
  GetArgusCheckinTypesResponses[keyof GetArgusCheckinTypesResponses];

export type GetEntriesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
  };
  url: "/entries";
};

export type GetEntriesErrors = {
  /**
   * Validation Failed or Action Error
   */
  400:
    | {
        /**
         * Error response
         */
        error: {
          /**
           * Code to handle on the frontend
           */
          code: "ValidationFailed";
          fieldErrors: Array<{
            /**
             * Name of the field
             */
            field: string;
            /**
             * Error message
             */
            message: string;
            fieldErrors?: Array<{
              /**
               * Name of the field
               */
              field: string;
              /**
               * Error message
               */
              message: string;
            }>;
          }>;
          location: "Query" | "Path" | "Body" | "Response";
        };
      }
    | {
        error: {
          /**
           * Code to handle on the frontend.
           */
          code: "ActionError";
          /**
           * Subcategory of error.
           */
          actionErrorCode:
            | "InvalidPassword"
            | "EmailAlreadyExists"
            | "WorkoutNotFound";
          /**
           * Description of the error. Can be safely displayed.
           */
          humanReadable: string;
        };
      };
  /**
   * Entity not found
   */
  404: {
    /**
     * Error response
     */
    error: {
      /**
       * Code to handle on the frontend
       */
      code: "NotFound";
    };
  };
  /**
   * Unknown Error
   */
  500: {
    error: UnknownErrorResponse;
  };
};

export type GetEntriesError = GetEntriesErrors[keyof GetEntriesErrors];

export type GetEntriesResponses = {
  /**
   * List of entries
   */
  200: {
    /**
     * Page or items
     */
    items: Array<Entry>;
    /**
     * Pagination details
     */
    info: {
      /**
       * Total number of items
       */
      count: number;
      /**
       * Current page
       */
      page: number;
      /**
       * Number of itemss per page
       */
      pageSize: number;
    };
  };
};

export type GetEntriesResponse = GetEntriesResponses[keyof GetEntriesResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}/api` | (string & {});
};
